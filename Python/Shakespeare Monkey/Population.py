import random
import copy
from Cell import Cell

class Population:
    def __init__(self, target, size, mutation_rate = 0.2):
        self.target = target
        self.size = size
        self.mutation_rate = mutation_rate
        self.generation = 0
        self.members = []
        self.candidates = []
        self.best_cell = None
        self.finished = False

    def __str__(self):
        #Calculate some parameters
        self.find_best_cell()
        self.calculate_pop_fitness()
        data = ""

        #Info is displayed
        data = data + "Target: {}\n".format(self.target)
        data = data + "Size: {}\n".format(self.size)
        data = data + "Generation: {}\n".format(self.generation)
        data = data + "Mutation rate: {}\n".format(self.mutation_rate)
        data = data + "Best cell | " + str(self.best_cell) + "\n"
        data = data + "Cells:\n============================\n"
        for idx, cell in enumerate(self.members):
            data = data + "Cell {}: ".format(idx) + str(cell) + "\n"

        return data

    def random_population(self):
        """Generates a random population from scratch"""
        for _ in range(self.size):
            new_cell = Cell(self.target)
            new_cell.random_dna()
            new_cell.calculate_fitness()

            self.members.append(new_cell)

    def calculate_pop_fitness(self):
        """It calculate the fitness of all the cells of the population"""
        for cell in self.members:
            cell.calculate_fitness()

    def find_best_cell(self):
        """It finds the best cell of the population

        self.best_cell is refreshed"""

        if self.members == []:
            self.best_cell = None
        else:
            self.calculate_pop_fitness()
            
            tmp_best = self.members[0]
            for cell in self.members:
                if cell.fitness > tmp_best.fitness:
                    tmp_best = cell
            
            self.best_cell = tmp_best

    def get_candidates(self):
        """Generates a list of cells which are possible candidates for next gen"""
        self.candidates = []
        for cell in self.members:
            cell.calculate_fitness()
            for _ in range(cell.fitness*5 + 1):   #At least 1 candidate is generated by Cell
                self.candidates.append(copy.deepcopy(cell))
    
    def next_gen(self):
        """It produces the next generation"""
        
        self.get_candidates()
        self.members = []

        for _ in range(self.size):
            cell1 = random.choice(self.candidates)
            cell2 = random.choice(self.candidates)
            child = cell1.reproduce(cell2, self.mutation_rate)
            self.members.append(child)

        self.generation = self.generation + 1

    def check_finished(self):
        """Checks if we hit the target"""
        self.find_best_cell()
        self.finished = self.best_cell.dna == self.target